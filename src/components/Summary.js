import React, { Component } from "react";
import connect from "react-redux/es/connect/connect";
import MySecondButton from "./utils/MySecondButton";
import { Link } from "react-router-dom";
import { openModalWithPhone, openModalWithAddress, openDataAgreement } from "../actionCreators/modalActions";
import { Field, reduxForm } from "redux-form";
import MySubmitButton from "./utils/MySubmitButton";
import { createTextMask } from "redux-form-input-masks";
import { sendFormDataEmail } from "../actionCreators/mailActions";

class Summary extends Component {

	RENDER_SCENARIO = window.app && window.app.env.INITIAL_RENDER_SCENARIO;

	handleButtonClick = () => {
		switch (this.RENDER_SCENARIO) {
			case "FIRST":
				this.props.openModalWithPhone();
				break;
			case "SECOND":
				this.props.openModalWithAddress();
				break;
			default:
				this.props.openModalWithPhone();
		}
	};

	handleFormSubmit = (data) => {
		this.props.sendFormDataEmail();
	};

	renderField = ({
									 input,
									 placeholder,
									 type,
									 meta: { touched, error }
								 }) => (
		<React.Fragment>
			<input {...input} placeholder={placeholder} type={type} />
			{touched &&
			(error && <div className='form-error'>{error}</div>)}
		</React.Fragment>
	);

	onPageAgreementLinkClick = () => {
		this.props.openModalWithPhone().then(nextState => {
			this.props.openDataAgreement("modalWithPhone");
		});
	};

	render() {
		const { handleSubmit, submitting, valid } = this.props;

		const phoneMask = createTextMask({
			pattern: "+7 (999) 999-99-99",
			guide: true
		});

		return (
			<div className='summary-screen'>

				<div className="steps-screen-left">
					<div className='steps-screen-left__header'>
						–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è –ø–æ –∑–∞–π–º—É:
					</div>

					<div className='steps-screen-left__commission'>
						<span>{this.props.data.commission}</span> —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π
					</div>

					<div className="steps-screen-left__quiz-summary">
						<ol>
							<li>
								<span className='q'>–ì–æ—Ç–æ–≤ –∂–¥–∞—Ç—å –≤—Å—é —Å—É–º–º—É 39 –¥–Ω–µ–π</span> &nbsp;
								<span className='a'>
									{this.props.form.quiz.values["question-1"] === "answer-2" ? "–î–ê" : "–ù–ï–¢"}
								</span>
							</li>
							<li>
								<span className='q'>–ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤–Ω–µ—Å—É –Ω–∞–ª–∏—á–Ω—ã–º–∏</span> &nbsp;
								<span className='a'>
									{this.props.form.quiz.values["question-2"] === "answer-1" ? "–î–ê" : "–ù–ï–¢"}
								</span>
							</li>
							<li>
								<span className='q'>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ö–ü–ö –ú—É—Ä–∞–≤–µ–π</span> &nbsp;
								<span className='a'>
									{this.props.form.quiz.values["question-3"] === "answer-1" ? "–î–ê" : "–ù–ï–¢"}
								</span>
							</li>
							<li>
								<span className='q'>–ñ–∏–ª—å–µ –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–π —á–µ—Ä—Ç–µ</span> &nbsp;
								<span className='a'>
									{this.props.form.quiz.values["question-4"] === "answer-1" ? "–î–ê" : "–ù–ï–¢"}
								</span>
							</li>
							<li>
								<span className='q'>–°–¥–µ–ª–∫–∞ —Å —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏</span> &nbsp;
								<span className='a'>
									{this.props.form.quiz.values["question-5"] === "answer-1" ? "–î–ê" : "–ù–ï–¢"}
								</span>
							</li>
						</ol>
					</div>

					<div className='steps-screen-left__people-percent'>
						<div className="people-percent__value">
							52%
						</div>

						<div className="people-percent__text">
							–ª—é–¥–µ–π –ø–ª–∞—Ç—è—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫—É—é –∫–æ–º–∏—Å—Å–∏—é
						</div>
					</div>

					<div className="clearfix"></div>

					<div className='steps-screen-left__quiz-again'>
						<Link to='/step-1'>ü°® –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑</Link>
					</div>
				</div>

				<div className="steps-screen-right">
					<div className="steps-screen-right__header">
						–û—Å—Ç–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å –∑–∞—è–≤–∫—É –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:
					</div>

					<div className="steps-screen-right__consult-steps">
						<ul>
							<li>- —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ä–∞–∑–±–µ—Ä–µ—Ç –∏–º–µ–Ω–Ω–æ –≤–∞—à —Å–ª—É—á–∞–π –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
							<li>- —É–∑–Ω–∞–µ—Ç–µ –∫–∞–∫ –∏ –∫–æ–º—É –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –¥–æ <span>0 —Ä—É–±–ª–µ–π</span></li>
							<li>- —Ä–∞—Å—Å–∫–∞–∂–µ–º –∫–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—É–º–º—É <span>–∑–∞–π–º–∞ –¥–æ 620 000 —Ä—É–±–ª–µ–π</span></li>
						</ul>
						<div
							className={`consult-steps__plus ${(this.RENDER_SCENARIO === "THIRD") ? "consult-steps__plus-accent" : ""}`}>
							+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 3000 —Ä—É–±.
							–µ—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π —Ä–µ—à–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å
							—Å –Ω–∞–º–∏
						</div>
					</div>

					{(this.RENDER_SCENARIO === "THIRD") ? (
							<React.Fragment>
								<div className='plain-form-content'>
									<form noValidate onSubmit={handleSubmit(this.handleFormSubmit)}>
										<MySubmitButton text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å" isEnabled={(!submitting) && valid} />
										<Field name='phone' component={this.renderField} type='tel'
													 placeholder="–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" {...phoneMask} />
									</form>
								</div>
								<div className="plain-with-phone__personal-data-link">
									–ù–∞–∂–∏–º–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –í—ã –¥–∞–µ—Ç–µ <span className='personal-data-link'
																										onClick={() => this.onPageAgreementLinkClick()}> —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞
						–æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</span>
								</div>
							</React.Fragment>
						) :
						<MySecondButton myClass='summary-screen__button' text='–•–æ—á—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'
														onButtonClick={() => this.handleButtonClick()}
														isEnabled={true} />
					}
				</div>
			</div>
		);
	}
}

const mapStateToProps = (state) => ({
	data: state.data,
	form: state.form
});

const validate = values => {
	const errors = {};

	if (!values.phone) {
		errors.phone = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
	} else if (values.phone.length < 10) {
		errors.phone = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞";
	}

	return errors;
};


export default reduxForm({
	form: "plainWithPhone",
	shouldValidate: () => true,
	destroyOnUnmount: true,
	validate
})(connect(mapStateToProps, {
	openModalWithPhone,
	openModalWithAddress,
	openDataAgreement,
	sendFormDataEmail
})(Summary));